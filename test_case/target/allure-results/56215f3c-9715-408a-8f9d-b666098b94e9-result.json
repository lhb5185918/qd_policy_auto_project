{"name": "test_login[case4]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not float", "trace": "self = <test_case.test_login.Test_login object at 0x000002712D3A3160>, case = {'data': 5.0, 'header': 5.0, 'method': 'post', 'url': 5.0, ...}\n\n    @pytest.mark.parametrize(\"case\", res)\n    def test_login(self, case):\n        number = case['用例编号']\n        title = case['用例名称']\n        method = case['method']\n        url = case['url']\n>       header = json.loads(case['header'])\n\ntest_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = 5.0, cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not float\n\nE:\\python\\lib\\json\\__init__.py:339: TypeError"}, "parameters": [{"name": "case", "value": "{'用例编号': 5.0, '用例名称': '登录测试5', 'method': 'post', 'url': 5.0, 'header': 5.0, 'data': 5.0, '预期结果': 5.0, '实际结果': ''}"}], "start": 1650007733741, "stop": 1650007733741, "uuid": "c626df32-75f2-4c67-b3e7-66204bd48146", "historyId": "5c768a9953cdb54802768b23206cabe5", "testCaseId": "545159219aea40d38c768fae9108b043", "fullName": "test_case.test_login.Test_login#test_login", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_login"}, {"name": "host", "value": "PC-20200812QIHW"}, {"name": "thread", "value": "6684-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_login"}]}